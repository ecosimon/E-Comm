UPDATE: Read more in CSS Grid Layouts and should definitely re-design 
		Wilson's site using grid's instead of random div's as the base.
		
		
		display: grid
		
		grid-template-column: 1fr 50px;
			-1fr : means a fraction, so it does the math based on the given height
			
		grid-template-areas: "sidebar  content"
							 "footer  footer";
			-this is literally aligning the area of the given grid area
		
		.aside {
			grid-area: sidebar;
		}
			-the class above selected the grid-area property and set the value to the
			 "grid-template-areas: siderbar" section. So that sidebar value will point
			 to that location of the area.
		
		@media only screen and (min-width: 600px) {
			
			.aside {
				display:grid;
			}
			
		}
			-the @media is a media query that can set what can/can't be seen within the context
			 of a mobile view, such as a phone.
		
		.aside {
			justify-items: center;
			align-items: center;
		}
			-grid's can align its items using the following: justify-items and align-items,
			justify-items aligns items horizontally and align-items aligns items vertically,
			by using them together we can align a element in the center of the grid area.
	
		General Rule of Thumb:
			It is appropriate to use Grid to layout the overall page layout, and Flexbox for
			inner UI components.
		